AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Microsserviço de Processamento de Pedidos com AWS SAM e Step Functions para Testes E2E.

Parameters:
  ProjectName:
    Type: String
    Default: PedidoServiceSam
    Description: Nome do projeto, usado como prefixo para recursos.
  TestFrameworkName:
    Type: String
    Default: GenericE2ETestFramework
    Description: Nome do framework de testes genérico, usado como prefixo para seus recursos.
  
Globals:
  Function:
    Runtime: python3.13
    Handler: app.lambda_handler
    Architectures:
    - arm64
    MemorySize: 1024
    Timeout: 30

Resources:
  PydanticLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${ProjectName}-pydantic-layer"
      Description: Layer contendo a biblioteca Pydantic.
      ContentUri: layers/pydantic_layer/
      RetentionPolicy: Retain
      CompatibleArchitectures:
        - arm64

    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: arm64

  # --- Tabela DynamoDB para o SERVIÇO DE PEDIDOS ---
  PedidosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Pedidos"
      AttributeDefinitions:
        - AttributeName: pedidoId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: pedidoId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # --- Função Lambda do SERVIÇO DE PEDIDOS ---
  ProcessaPedidoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/processa_pedido # Caminho do código
      FunctionName: !Sub "${ProjectName}-ProcessaPedido"
      Policies:
        - DynamoDBCrudPolicy: # Alterado para Crud para permitir leitura e escrita
            TableName: !Ref PedidosTable
        - AWSLambdaBasicExecutionRole
      Layers:
        - !Ref PydanticLayer
      Environment:
        Variables:
          PEDIDOS_TABLE_NAME: !Ref PedidosTable
      Events:
        ProcessaPedidosApi:
          Type: Api
          Properties:
            Path: /pedidos
            Method: POST
            RestApiId: !Ref PedidoApi


  # --- API Gateway do SERVIÇO DE PEDIDOS ---
  PedidoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ProjectName}-API"
      StageName: prod

  # --- Step Functions para o TESTE E2E DO SERVIÇO DE PEDIDOS ---
  OrderProcessingE2ETest:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${ProjectName}-OrderE2ETest"
      # Aponta para o arquivo de definição ASL externo.
      DefinitionUri: tests/PedidoServiceSam-OrderE2ETest/order_e2e_test.asl.json
      # Substitui as variáveis no arquivo ASL pelos valores dos recursos.
      DefinitionSubstitutions:
        OrdersTableName: !Ref PedidosTable
        ApiEndpoint: !Sub "https://${PedidoApi}.execute-api.${AWS::Region}.amazonaws.com"
        ApiEndpointUrl: !Sub "https://${PedidoApi}.execute-api.${AWS::Region}.amazonaws.com/prod/pedidos"
        ConnectionArn: !GetAtt MyApiConnection.Arn
      # Define as permissões que a máquina de estados precisa para executar.
      Policies:
        # Permissão para criar, ler e deletar itens na tabela de pedidos.
        - DynamoDBCrudPolicy:
            TableName: !Ref PedidosTable
        # Permissões para usar a Conexão do EventBridge e ler o segredo associado.
        - Statement:
          - Effect: Allow
            Action: events:RetrieveConnectionCredentials
            Resource: !GetAtt MyApiConnection.Arn
          - Effect: Allow
            Action: states:InvokeHTTPEndpoint
            Resource: "*"
          - Effect: Allow
            Action: 
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            # NOTA: Em produção, é recomendado restringir este recurso ao ARN específico do segredo.
            # Para este ambiente de teste, "*" é suficiente.
            Resource: "*"
    DependsOn:
      - ProcessaPedidoFunction
      - PedidoApi
      - PedidosTable

  MyApiConnection:
    Type: AWS::Events::Connection
    Properties:
      AuthorizationType: API_KEY
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: "placeholder-key-name"
          ApiKeyValue: "placeholder-key-value"
      Description: "Connection for my API without authentication"
      Name: !Sub "${ProjectName}-api-connection"

Outputs:
  # --- Outputs existentes do serviço de pedidos ---
  ApiGatewayEndpoint:
    Description: URL do endpoint da API Gateway para processar pedidos (integração proxy para SAM local)
    Value: !Sub "https://${PedidoApi}.execute-api.${AWS::Region}.amazonaws.com/prod/pedidos"
    Export:
      Name: !Sub "${ProjectName}SamApiEndpoint"
  DynamoDBTableName:
    Description: Nome da tabela DynamoDB
    Value: !Ref PedidosTable
    Export:
      Name: !Sub "${ProjectName}SamDynamoDBTable"

  # --- Output para a nova State Machine de Teste E2E Específica ---
  OrderProcessingE2ETestArn:
    Description: ARN da Step Functions para o teste E2E de processamento de pedidos
    Value: !Ref OrderProcessingE2ETest
    Export:
      Name: !Sub "${ProjectName}OrderE2ETestArn"