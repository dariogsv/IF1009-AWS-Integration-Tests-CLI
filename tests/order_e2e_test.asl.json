{
    "Comment": "Fluxo de Teste E2E para processamento de pedido",
    "StartAt": "CreateTestData",
    "States": {
        "CreateTestData": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
                "TableName": "${OrdersTableName}",
                "Item": {
                    "pedidoId": {
                        "S.$": "$.pedidoId"
                    },
                    "item": {
                        "S.$": "$.item"
                    },
                    "timestamp": {
                        "S.$": "$$.Execution.StartTime"
                    },
                    "status": {
                        "S": "PROCESSED"
                    },
                    "quantidade": {
                        "S.$": "$.quantidade"
                    }
                }
            },
            "ResultPath": "$.createResult",
            "Next": "ExecuteFunctionUnderTest",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "TestFailed",
                    "ResultPath": "$.error"
                }
            ]
        },
        "ExecuteFunctionUnderTest": {
            "Type": "Task",
            "Comment": "Invoca o endpoint do API Gateway usando a integração HTTP genérica.",
            "Resource": "arn:aws:states:::http:invoke",
            "Parameters": {
                "ApiEndpoint": "${ApiEndpointUrl}",
                "Method": "POST",
                "Headers": {
                    "Content-Type": "application/json"
                },
                "Authentication": {
                    "ConnectionArn": "${ConnectionArn}"
                },
                "RequestBody": {
                    "item.$": "$.item",
                    "quantidade.$": "$.quantidade"
                }
            },
            "ResultPath": "$.executionResult",
            "Next": "VerifyResult",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "TestFailed",
                    "ResultPath": "$.error"
                }
            ]
        },
        "VerifyResult": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
                "TableName": "${OrdersTableName}",
                "Key": {
                    "pedidoId": {
                        "S.$": "$.pedidoId"
                    },
                    "timestamp": {
                        "S.$": "$$.Execution.StartTime"
                    }
                }
            },
            "ResultPath": "$.verificationData",
            "Next": "CheckOrderStatus",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "TestFailed",
                    "ResultPath": "$.error"
                }
            ]
        },
        "CheckOrderStatus": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.verificationData.Item.status.S",
                    "StringEquals": "PROCESSED",
                    "Next": "CleanUpTestData"
                }
            ],
            "Default": "TestFailedWithReason"
        },
        "CleanUpTestData": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:deleteItem",
            "Parameters": {
                "TableName": "${OrdersTableName}",
                "Key": {
                    "pedidoId": {
                        "S.$": "$.pedidoId"
                    },
                    "timestamp": {
                        "S.$": "$$.Execution.StartTime"
                    }
                }
            },
            "ResultPath": null,
            "Next": "TestPassed",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Comment": "Falha na limpeza não deve falhar o teste, apenas registrar.",
                    "Next": "TestPassed"
                }
            ]
        },
        "TestPassed": {
            "Type": "Succeed"
        },
        "TestFailedWithReason": {
            "Type": "Fail",
            "Cause": "A verificação do status do pedido falhou. O status esperado era 'PROCESSED'.",
            "Error": "AssertionFailed"
        },
        "TestFailed": {
            "Type": "Fail",
            "Cause": "$.error.Cause",
            "Error": "$.error.Error"
        }
    }
}